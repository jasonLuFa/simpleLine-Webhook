// Code generated by MockGen. DO NOT EDIT.
// Source: jasonLuFa/simpleLine-Webhook/save/query (interfaces: IUserMessageRepository)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	dto "jasonLuFa/simpleLine-Webhook/model/DTO"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIUserMessageRepository is a mock of IUserMessageRepository interface.
type MockIUserMessageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIUserMessageRepositoryMockRecorder
}

// MockIUserMessageRepositoryMockRecorder is the mock recorder for MockIUserMessageRepository.
type MockIUserMessageRepositoryMockRecorder struct {
	mock *MockIUserMessageRepository
}

// NewMockIUserMessageRepository creates a new mock instance.
func NewMockIUserMessageRepository(ctrl *gomock.Controller) *MockIUserMessageRepository {
	mock := &MockIUserMessageRepository{ctrl: ctrl}
	mock.recorder = &MockIUserMessageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserMessageRepository) EXPECT() *MockIUserMessageRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIUserMessageRepository) Create(arg0 *dto.UserMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIUserMessageRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIUserMessageRepository)(nil).Create), arg0)
}

// List mocks base method.
func (m *MockIUserMessageRepository) List(arg0 string) ([]*dto.UserMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*dto.UserMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIUserMessageRepositoryMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIUserMessageRepository)(nil).List), arg0)
}
